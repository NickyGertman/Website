{"name":"Where's Waldo: A Study in Image Processing and Recognition","tagline":"","body":"#Who is Waldo and why do I want to find him?\r\nWhere's Waldo is a children's picture game invented by Martin Handford. The game involves a large image filled with various characters and funny situations. The reader is supposed to search through the image in order to find Waldo, who can always be found wearing a red and white polo, glasses, and a bobble hat. The image usually contains a few characters who look an awful lot like Waldo, but are only meant to trick the reader.\r\n![WheresWaldo](https://cloud.githubusercontent.com/assets/15268123/11768783/54557c38-a18c-11e5-81dc-0d702c9d569b.jpg)\r\n#This project will compare two separate approaches to finding Waldo in the famous picture game, Where's Waldo. \r\n\r\nThe first approach is a human written algorithm: take an image's red channel to filter out all non-red colors. This will leave behind only the reds in the image:\r\n![Reds only](https://cloud.githubusercontent.com/assets/15268123/11768803/e82d49e0-a18c-11e5-8f84-43a03171c01a.jpg)\r\nThen, we want to look for the areas with both red and white. In this image, everything red and white appears white and everything else appears black: \r\n![redsAndWhites](https://cloud.githubusercontent.com/assets/15268123/11768826/9975e0a4-a18d-11e5-94e9-af049eb52040.jpg)\r\nFinally, we apply this filter to the original image and circle the positive results. Clearly, this contains far too many false positives and did not go quite as well as I had hoped. Later on, I hope to add functionality of taking these positive results and compare them with the face of waldo in order to get only one positive result. [View this code here.](https://github.com/NickyGertman/Website/blob/master/RedChannel.py)\r\n![results](https://cloud.githubusercontent.com/assets/15268123/11768890/6fb97e54-a18f-11e5-8158-47e45a37a585.jpg)\r\n\r\nThe second approach involves machine learning. We will use a Neural Network to study the image of characters that are and are not Waldo to train the computer. This was accomplished by myself first (painstakingly) finding Waldo by hand in 25 different images. Then, I normalized the face data by cropping each of Waldo's faces to be 50x50 pixels. In order to give the computer an example of 'non-Waldo' faces, I did the same by taking 25 face images from the game that were not Waldo. \r\n\r\nThe actual training process involves using these images as the X-values in a function, and assigning the Y-values as whether the image is Waldo or not. Waldo images are assigned a Y-value of 1 (for true) and non-Waldo images are assigned a Y-value of 0 (for false). Once we have all of these values assigned, we apply what is called a fit function. This function takes the X and Y values and finds the correlation between the two. The correlation is then applied to future 'predictions' - when we test the function by only giving it an image and having it detect whether the image is waldo or not. \r\n\r\nThis part (finding the fit function) proved to be the most difficult. I tried various training classifiers in an effort to improve the accuracy of the predictions the machine was making. I have multiple different versions, all trying out different ways to apply a 'fit': one two three four five six.\r\n\r\nAfter the computer is trained, we will be able to have a moving window go over each image and show the parts that produce a positive result: Waldo. Note: currently not compiling, [this code is still a work in progress.](https://github.com/NickyGertman/Website/blob/master/deepLearning.py)\r\n\r\nThe purpose of this study is to improve the old-fashioned method of finding Waldo by hand. It is also a great learning experience for me because I have never done any sort of image manipulation/processing before.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}